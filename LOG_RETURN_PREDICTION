import numpy
import math
class param():
    N=0
    d=0
    size=16*14
    T=16*1
class mparam():
    h=0.01
    f1 = lambda x : numpy.log(1+numpy.log(1+0.5*(1+math.erf(1/math.sqrt(2)*x))*x))
    f2 = lambda x : -numpy.log(numpy.log(1+numpy.exp(2-x)))
    g1 = lambda x : (0.5+0.5*math.erf(1/math.sqrt(2)*x)+1/math.sqrt(2*math.pi)*numpy.exp(-0.5*pow(x,2))*x)/((1+numpy.log(1+0.5*(1+math.erf(1/math.sqrt(2)*x))*x))*(1+0.5*(1+math.erf(1/math.sqrt(2)*x))*x))
    g2 = lambda x : numpy.exp(2-x)/(numpy.log(1+numpy.exp(2-x))*(1+numpy.exp(2-x)))
    l = lambda x : pow(x,2)
class model():
    def __init__(self,N,M):
        self.entries=M
        self.numberfeatures=N
        self.loss=mparam.l
        self.T1=numpy.random.uniform(-mparam.h,mparam.h,[self.numberfeatures,self.numberfeatures])
        self.T2=numpy.random.uniform(-mparam.h,mparam.h,[self.numberfeatures,1])
        self.activate1=numpy.vectorize(mparam.f1)
        self.activate2=numpy.vectorize(mparam.f2)
        self.dactivate1=numpy.vectorize(mparam.g1)
        self.dactivate2=numpy.vectorize(mparam.g2)
    def update(self,X,S,alpha):
        dE1,dE2=model.dE(self,X,S)
        T1temp,T2temp=self.T1-alpha*dE1,self.T2-alpha*dE2
        self.T1,self.T2=T1temp,T2temp
    def run(self,X,S,alpha,i):
        j=0
        while j<i:
            model.update(self,X,S,alpha)
            j=j+1
    def forward(M,X):
        X1=numpy.matmul(X,M.T1)
        Y1=M.activate1(X1)
        X2=numpy.matmul(Y1,M.T2)
        Y2=M.activate2(X2)
        return Y2
    def forward_compute(M,X):
        X1=numpy.matmul(X,M.T1)
        Y1=M.activate1(X1)
        H1=M.dactivate1(X1)
        X2=numpy.matmul(Y1,M.T2)
        Y2=M.activate2(X2)
        H2=M.dactivate2(X2)
        return Y1,Y2,H1,H2
    def dE(M,X,S):
        Y1,Y2,H1,H2=model.forward_compute(M,X)
        E2=numpy.multiply((Y2-S),H2)
        dE2=numpy.matmul(numpy.transpose(Y1),E2)
        E1=numpy.multiply(numpy.transpose(numpy.matmul(M.T2,numpy.transpose(E2))),H1)
        dE1=numpy.matmul(numpy.transpose(X),E1)
        return dE1,dE2
    def error(M,X,S):
        Y=model.forward(M,X)
        return float(sum(M.loss(Y-S)))
